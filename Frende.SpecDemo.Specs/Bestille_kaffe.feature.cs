// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.235
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Frende.SpecDemo.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Bestilling av kaffe")]
    public partial class BestillingAvKaffeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Bestille_kaffe.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("nb-NO"), "Bestilling av kaffe", "For å kunne fortsette å levere fantastiske løsninger\r\nSom en kodeape\r\nØnsker jeg " +
                    "å kunne bestille kaffe", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bestille en enkelprodukt")]
        [NUnit.Framework.TestCaseAttribute("enkel espresso", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("dobbel espresso", "20", new string[0])]
        [NUnit.Framework.TestCaseAttribute("cappucino", "20", new string[0])]
        public virtual void BestilleEnEnkelprodukt(string produkt, string pris, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bestille en enkelprodukt", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("at jeg har valgt en {0}", produkt));
#line 8
 testRunner.When("jeg bestiller");
#line 9
 testRunner.Then(string.Format("skal prisen være {0} kr", pris));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bestilling en dobbel espresso og en cappucino skal gi rabatt")]
        public virtual void BestillingEnDobbelEspressoOgEnCappucinoSkalGiRabatt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bestilling en dobbel espresso og en cappucino skal gi rabatt", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("at jeg har valgt en dobbel espresso");
#line 19
 testRunner.And("at jeg har valgt en cappucino");
#line 20
 testRunner.When("jeg bestiller");
#line 21
 testRunner.Then("skal prisen være 35 kr");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
